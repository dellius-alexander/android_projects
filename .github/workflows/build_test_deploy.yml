## This workflow uses actions that are not certified by GitHub.
## They are provided by a third-party and are governed by
## separate terms of service, privacy policy, and support
## documentation.
###########################################################################
## This workflow will build a Java project with Gradle and
## cache/restore any dependencies to improve the workflow execution time
###########################################################################
name: 'Build, Test Android App'
env:
  ANDROID_ENV: development
  ANDROID_API_LEVEL: 33
on:
  push:
    branches:
      - 'master'
      - 'release*'
      - '*'

  pull_request:
    branches:
      - 'master'
      - 'release*'
      - '*'

#  # Allows you to run this workflow manually from the Actions tab
#  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: false
jobs:
  build-units:
    runs-on: ubuntu-latest
    container:
      image: dalexander2israel/android:2022.09.2
#      ports:
#        - 80:80
#        - 5554:5554
      #      volumes:
      #        - my_docker_volume:/volume_mount
      options: --user root
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - run: mkdir -p /github/home/.android/avd/test.avd/

      - name: Gradle cache
        uses: gradle/gradle-build-action@v2
      - name: AVD cache
        uses: actions/cache@v3
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ env.ANDROID_API_LEVEL }}

      - name: List Directory
        run: ls -liaR

      - name: Download Gradle version
        run: gradle wrapper

      - name: Download androidDependencies
        run: ./gradlew androidDependencies

      - name: Lint Test
        run: ./gradlew lint test
      - name: Unit Tests
        run: ./gradlew test

#      - name: create AVD and generate snapshot for caching
#        if: steps.avd-cache.outputs.cache-hit != 'true'
#        uses: reactivecircus/android-emulator-runner@v2
#        with:
#          api-level: ${{ env.ANDROID_API_LEVEL }}
#          force-avd-creation: false
#          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
#          disable-animations: false
#          script: echo "Generated AVD snapshot for caching."



  build-instrumented:
    runs-on: ubuntu-latest
    container:
      image: dalexander2israel/android:2022.09.2
#      ports:
#        - 80:80
#        - 5554:5554
      #      volumes:
      #        - my_docker_volume:/volume_mount
      options: --user root
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - run: mkdir -p /github/home/.android/avd/test.avd/

      - name: Gradle cache
        uses: gradle/gradle-build-action@v2
      - name: AVD cache
        uses: actions/cache@v3
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ env.ANDROID_API_LEVEL }}

      - name: List Directory
        run: ls -liaR

      - name: Download Gradle version
        run: gradle wrapper

      - name: Download androidDependencies
        run: ./gradlew androidDependencies

      - name: Lint Test
        run: ./gradlew lint test

      - name: Run instrumented tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ env.ANDROID_API_LEVEL }}
          arch: x86
          profile: Pixel XL
          script: |
            ./gradlew connectedAndroidTest